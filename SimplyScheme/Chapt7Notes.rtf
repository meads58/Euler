{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 Variables Chapter 7\
\'a0\
- Variable: Connection between name and a value.\
Functional programming: Once a variable exists we aren't going to change the value of the variable.\
Scheme can have variables with the same name but the variables are specific to a procedure e.g. the variable isn't over written, its just another variable with the same name but in a different procedure.\
\'a0\
A variable is the association between a formal parameter and an actual argument.\
\'a0\
Globla variable: 'define' is used to to create global variables. e.g. (define pi 3.14159). Global variables can be used anywhere. If a global paramaeter and formal paramaeter have the same name the rule is that formal parameter takes precedence.\
\'a0\
The association of a formal parameter (a name) with an actual argument (a value) is called a local variable.\
\'a0\
Substitution\
\'a0\
Let Special form: takes 2 arguments: Name-value pair (there can be more than one) and the body of the let expression.\
\'a0\
(let ((<var1> <exp1>) ... (<var_n> <exp_n>))\
\'a0 <body>)\
\'a0\
\'a0\
(let ((name1 (fn1 arg1))\
\'a0\'a0\'a0\'a0\'a0 (name2 (fn2 arg2))\
\'a0\'a0\'a0\'a0\'a0 (name3 (fn3 arg3)))\
\'a0 body)\
\'a0\
Let is a 'derived expression' in that we can make more than one tempoaray variable at once like 'cond' is a group of 'if' statements.\
\'a0\
Definitions with 'define' are permanent in scheme and you can't overwrite them e.g. (define a (+ a 4)).}