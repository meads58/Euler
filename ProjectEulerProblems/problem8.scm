;Find the greatest product of five consecutive digits in this 1000-digit number below.

(define bigList

) 

;Make-list-of-5 takes the first 5 values and returns a list of these 5 values

(define (make-list-of-5 big-list list-size)
     (cond ((empty? big-list) '())
         ((= list-size 5) '())
           (else (cons (item 1 big-list)(make-list-of-5 (butfirst big-list) (+ list-size 1))))))

;sum-of-5 takes a list and multiplies all the numbers in the list together  
(define (sum-of-5 list-5 total)
  (if (empty? list-5) total
  (sum-of-5 (cdr list-5) (* total (car list-5)))))

;compare-lists holds the biggest total from sum-of-5 and compares it to the next sum of 5
;values. If bigger this will become the new total else it will compare to the next sum of 5 values.
(define (compare-lists total next-total big)
    (cond ((empty? next-total) total)
          ((empty? big) total)
          ((< total next-total) (compare-lists next-total (sum-of-5 (make-list-of-5 (butfirst big) 0) 1) (butfirst big)))
          (else (compare-lists total (sum-of-5 (make-list-of-5 (butfirst big) 0) 1) (butfirst big)))))

;main call
(compare-lists 1(sum-of-5 (make-list-of-5 bigList 0) 1) bigList)



